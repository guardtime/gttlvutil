#
# GUARDTIME CONFIDENTIAL
#
# Copyright (C) [2016] Guardtime, Inc
# All Rights Reserved
#
# NOTICE:  All information contained herein is, and remains, the
# property of Guardtime Inc and its suppliers, if any.
# The intellectual and technical concepts contained herein are
# proprietary to Guardtime Inc and its suppliers and may be
# covered by U.S. and Foreign Patents and patents in process,
# and are protected by trade secret or copyright law.
# Dissemination of this information or reproduction of this
# material is strictly forbidden unless prior written permission
# is obtained from Guardtime Inc.
# "Guardtime" and "KSI" are trademarks or registered trademarks of
# Guardtime Inc.
#



###############################################################################
# Using converted KSI signature text file stream as input to dump.
# Using '-P' option for printing tag names.

TESTCASE: {GTTLVUNDUMP} test/resources/sig/ok-sig-2014-08-01.1.ksig.txt | {GTTLVDUMP} -P
>>>  /TLV.0800.*Uni-signature PDU.*
.*TLV.0805.*Calendar auth record.*
.*TLV.10,F.*Published data.*
.*TLV.02.*Published time. 53dc2a00.*
.*TLV.04.*Published hash. 01e4fc0853cacb3c888ee4d2f843083acb1a822e60403a6af7167f70d0ca8eee61.*/
>>>= 0

###############################################################################
# Save converted KSI signature text file to a binary file. Use the binary file
# as input to dump. Using '-P' option for printing tag names.

TESTCASE: {GTTLVUNDUMP} test/resources/sig/ok-sig-2014-08-01.1.ksig.txt > {TEST_DIR}/undump_ok-sig-2014-08-01.ksig
>>>= 0

TESTCASE: {GTTLVDUMP} -P {TEST_DIR}/undump_ok-sig-2014-08-01.ksig
>>>  /TLV.0800.*Uni-signature PDU.*
.*TLV.0805.*Calendar auth record.*
.*TLV.10,F.*Published data.*
.*TLV.02.*Published time. 53dc2a00.*
.*TLV.04.*Published hash. 01e4fc0853cacb3c888ee4d2f843083acb1a822e60403a6af7167f70d0ca8eee61.*/
>>>= 0

###############################################################################
# Using stream KSI signature stream from undump, grep publication time from
# calendar authentication record.

TESTCASE: {GTTLVUNDUMP} test/resources/sig/ok-sig-2014-08-01.1.ksig.txt | {GTTLVGREP} 800.805.10.02
>>>
53dc2a00
>>>= 0

###############################################################################
# Save converted KSI signature binary file to a text file. Use stream, conterted
# from text file, as input to dump. Using '-P' option for printing tag names.

TESTCASE: {GTTLVDUMP} test/resources/sig/ok-sig-2014-08-01.1.ksig > {TEST_DIR}/dump_ok-sig-2014-08-01.txt
>>>= 0

TESTCASE: {GTTLVUNDUMP} {TEST_DIR}/dump_ok-sig-2014-08-01.txt | {GTTLVDUMP} -P
>>>  /TLV.0800.*Uni-signature PDU.*
.*TLV.0805.*Calendar auth record.*
.*TLV.10,F.*Published data.*
.*TLV.02.*Published time. 53dc2a00.*
.*TLV.04.*Published hash. 01e4fc0853cacb3c888ee4d2f843083acb1a822e60403a6af7167f70d0ca8eee61.*/
>>>= 0

###############################################################################
# Using converted stream from tlvundump for tlvgreping calendar hash chain
# publication time tlv.

TESTCASE: {GTTLVUNDUMP} test/resources/tlv/ok-sig-2014-04-30.1-extend_response.tlv.txt | {GTTLVGREP} 300.302.802.01
>>>
53740380
>>>= 0

###############################################################################
# Using converted stream from tlvundump for tlvgreping calendar hash chain
# publication time tlv (binary representarion). Stream the resulting tlv to tlvdump.

TESTCASE: {GTTLVUNDUMP} test/resources/tlv/ok-sig-2014-04-30.1-extend_response.tlv.txt | {GTTLVGREP} 300.302.802.01 -re | {GTTLVDUMP}
>>>
TLV[01]: 53740380
>>>= 0

###############################################################################
# Create a dummy TLV element with tag 0x0123. Tlvdump to stdout.

TESTCASE: echo "01" | xxd -r -p | {GTTLVWRAP} -t 0x0123 | {GTTLVDUMP}
>>>
TLV[0123]: 01
>>>= 0

###############################################################################
# Create a dummy TLV element with tag 0123. Tlvdump to stdout.

TESTCASE: echo "01" | xxd -r -p | {GTTLVWRAP} -t 0123 | {GTTLVDUMP}
>>>
TLV[0123]: 01
>>>= 0

###############################################################################
# Create dummy TLV element and set non-critical flag. Tlvdump to stdout.

TESTCASE: echo "01" | xxd -r -p | {GTTLVWRAP} -t 0x0123 -N | {GTTLVDUMP}
>>>
TLV[0123,N]: 01
>>>= 0

###############################################################################
# Create dummy TLV element and set forward flag. Tlvdump to stdout.

echo "01" | xxd -r -p | {GTTLVWRAP} -t 0x0123 -F | {GTTLVDUMP}
>>>
TLV[0123,F]: 01
>>>= 0

###############################################################################
# Create an aggregation error response. Write the response to file. Compare the
# the result to the original tlvdumped file.

TESTCASE: ((echo "61 6e 6f 6e 00" | xxd -r -p | {GTTLVWRAP} -t 01; echo "54 ca 47 b5" | xxd -r -p | {GTTLVWRAP} -t 02; echo "01" | xxd -r -p | {GTTLVWRAP} -t 03) | {GTTLVWRAP} -t 01; (echo -n "" | {GTTLVWRAP} -t 01; echo "01 03" | xxd -r -p | {GTTLVWRAP} -t 04; (echo -n "The request contained invalid payload"; echo "00" | xxd -r -p) | {GTTLVWRAP} -t 05) | {GTTLVWRAP} -t 0202;(echo "01 c4 aa af f7 9b ab 91 37 d2 c1 d8 c4 3e 4f cd 09 c3 bc e2 8e 19 07 9b e3 6b b0 d2 11 86 4e 2a 3e") | xxd -r -p | {GTTLVWRAP} -t 1f) | {GTTLVWRAP} -t 0200 | {GTTLVDUMP} > {TEST_DIR}/wrap_dump_ok_req_err.txt
>>>
>>>= 0

TESTCASE: {GTTLVDUMP} test/resources/tlv/ok_aggr_err_response-1.tlv > {TEST_DIR}/dump_ok_aggr_err_response-1.tlv.txt
>>>
>>>= 0

TESTUTIL: diff {TEST_DIR}/wrap_dump_ok_req_err.txt {TEST_DIR}/dump_ok_aggr_err_response-1.tlv.txt
>>>
>>>= 0

###############################################################################
# Compare converted stream (dump->undump) to original binary file. Using pipe.

TESTCASE: {GTTLVDUMP} test/resources/sig/ok-sig-2014-08-01.1.ksig | {GTTLVUNDUMP} | diff test/resources/sig/ok-sig-2014-08-01.1.ksig -
>>>
>>>= 0

###############################################################################
# Compare converted files (dump->undump) to original binary file.
# Save intermediate outputs from dump and undump.

TESTCASE: {GTTLVDUMP} test/resources/sig/ok-sig-2014-08-01.1.ksig > {TEST_DIR}/dump_ok-sig-2014-08-01.1.txt
>>>
>>>= 0

TESTCASE: {GTTLVUNDUMP} {TEST_DIR}/dump_ok-sig-2014-08-01.1.txt > {TEST_DIR}/undump_ok-sig-2014-08-01.1.txt.ksig
>>>
>>>= 0

TESTUTIL: diff test/resources/sig/ok-sig-2014-08-01.1.ksig {TEST_DIR}/undump_ok-sig-2014-08-01.1.txt.ksig
>>>
>>>= 0

###############################################################################
# Compare converted stream (undump->dump) to original text file.

TESTCASE: {GTTLVUNDUMP} test/resources/sig/ok-sig-2014-08-01.1.ksig.txt | {GTTLVDUMP} | diff test/resources/sig/ok-sig-2014-08-01.1.ksig.txt -
>>>
>>>= 0

###############################################################################
# Compare converted files (undump->dump) to original text file.
# Save intermediate outputs from dump and undump.

TESTCASE: {GTTLVUNDUMP} test/resources/sig/ok-sig-2014-08-01.1.ksig.txt > {TEST_DIR}/undump_ok-sig-2014-08-01.1.ksig
>>>
>>>= 0

TESTCASE: {GTTLVDUMP} {TEST_DIR}/undump_ok-sig-2014-08-01.1.ksig > {TEST_DIR}/dump_ok-sig-2014-08-01.1.ksig.txt
>>>
>>>= 0

TESTUTIL: diff test/resources/sig/ok-sig-2014-08-01.1.ksig.txt {TEST_DIR}/dump_ok-sig-2014-08-01.1.ksig.txt
>>>
>>>= 0

###############################################################################
# Compare converted stream (dump->undump->dump) to text representation of the
# original binary file.

TESTCASE: {GTTLVDUMP} test/resources/sig/ok-sig-2014-08-01.1.ksig | {GTTLVUNDUMP} | {GTTLVDUMP} | diff test/resources/sig/ok-sig-2014-08-01.1.ksig.txt -
>>>
>>>= 0

###############################################################################
# Compare converted stream (undump->dump->undump) to binary representation of
# the original text file.

TESTCASE: {GTTLVUNDUMP} test/resources/sig/ok-sig-2014-08-01.1.ksig.txt | {GTTLVDUMP} | {GTTLVUNDUMP} | diff test/resources/sig/ok-sig-2014-08-01.1.ksig -
>>>
>>>= 0

###############################################################################
# Compare converted stream (undump->dump->undump) to binary representation of
# the original text file.
# Using '-a' option forc annotating known KSI elements. Tlvundump should ignore
# the annotations.

TESTCASE: {GTTLVDUMP} -a test/resources/sig/ok-sig-2014-08-01.1.ksig | {GTTLVUNDUMP} | {GTTLVDUMP} | diff test/resources/sig/ok-sig-2014-08-01.1.ksig.txt -
>>>
>>>= 0

###############################################################################
# Create a multi response binary stream. Compare it to the original file.

TESTCASE: {GTTLVUNDUMP} test/resources/tlv/test2-extend_response-reqId_1.txt test/resources/tlv/test2-extend_response-reqId_2.txt | diff test/resources/tlv/test2-extend_response-multiple.tlv -
>>>
>>>= 0

###############################################################################
# TlvDump KSI signature using -e flag with '64' to display in base64.
# TlvGrep calendar authentication record publication data publication hash and
# convert the result to base64. Save the result to file.
# The file content is used as pattern for searching the pablication hash in
# dumped stream.

TESTCASE: {GTTLVGREP} -r 800.805.10.04 test/resources/sig/ok-sig-2014-08-01.1.ksig | base64 > {TEST_DIR}/grep_base64_pattern.txt
>>>
>>>= 0

TESTCASE: {GTTLVDUMP} -e 64 test/resources/sig/ok-sig-2014-08-01.1.ksig | grep -of {TEST_DIR}/grep_base64_pattern.txt
>>>
AeT8CFPKyzyIjuTS+EMIOssagi5gQDpq9xZ/cNDKju5h
>>>= 0

###############################################################################
# TlvDump KSI signature using -s flag for not parsing unknown elements.
# Build a tree with dummy elements:
# TLV[0123]:
#  TLV[01]: 717765727479

TESTCASE: (echo -n "qwerty" | {GTTLVWRAP} -t 01) | {GTTLVWRAP} -t 123 | {GTTLVDUMP} -s
>>>
TLV[0123]: 0106717765727479
>>>= 0

###############################################################################
